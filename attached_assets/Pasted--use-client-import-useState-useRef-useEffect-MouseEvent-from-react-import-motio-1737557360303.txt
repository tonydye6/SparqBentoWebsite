// use client

import { useState, useRef, useEffect, MouseEvent } from "react";
import {
  motion,
  useMotionValue,
  useSpring,
  useTransform,
} from "framer-motion";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Calendar, MapPin, Users } from "lucide-react";

interface Enhanced3DEventCardProps {
  title: string;
  description: string;
  date: string;
  location: string;
  attendees: number;
  tags: string[];
  onAttend: () => void;
}

function LaserBeam({ side }: { side: "top" | "right" | "bottom" | "left" }) {
  const beamRef = useRef<HTMLDivElement>(null);
  const [beamLength, setBeamLength] = useState(0);

  useEffect(() => {
    if (beamRef.current) {
      setBeamLength(
        side === "top" || side === "bottom"
          ? beamRef.current.offsetWidth
          : beamRef.current.offsetHeight
      );
    }
  }, [side]);

  const beamStyle: React.CSSProperties = {
    position: "absolute",
    background: "linear-gradient(90deg, #00f6ff, #0044ff)",
    opacity: 0.7,
    ...(side === "top" || side === "bottom"
      ? { height: "2px", width: "100%", [side]: "-1px", left: 0 }
      : { width: "2px", height: "100%", [side]: "-1px", top: 0 }),
  };

  const initial = side === "right" || side === "bottom" ? beamLength : 0;
  const animate = side === "right" || side === "bottom" ? 0 : beamLength;

  return (
    <div ref={beamRef} style={beamStyle}>
      <motion.div
        style={{
          position: "absolute",
          background: "#00f6ff",
          boxShadow: "0 0 8px #00f6ff",
          ...(side === "top" || side === "bottom"
            ? { height: "100%", width: "20px" }
            : { width: "100%", height: "20px" }),
        }}
        initial={{ [side === "top" || side === "bottom" ? "x" : "y"]: initial }}
        animate={{ [side === "top" || side === "bottom" ? "x" : "y"]: animate }}
        transition={{
          duration: 1.5,
          repeat: Infinity,
          repeatType: "reverse",
          ease: "linear",
        }}
      />
    </div>
  );
}

export default function Enhanced3DEventCard({
  title,
  description,
  date,
  location,
  attendees,
  tags,
  onAttend,
}: Enhanced3DEventCardProps) {
  const ref = useRef<HTMLDivElement>(null);
  const [hovered, setHovered] = useState(false);
  const [isAttending, setIsAttending] = useState(false);

  const x = useMotionValue(0);
  const y = useMotionValue(0);

  const mouseXSpring = useSpring(x);
  const mouseYSpring = useSpring(y);

  const rotateX = useTransform(mouseYSpring, [-0.5, 0.5], ["17.5deg", "-17.5deg"]);
  const rotateY = useTransform(mouseXSpring, [-0.5, 0.5], ["-17.5deg", "17.5deg"]);

  const handleMouseMove = (e: MouseEvent<HTMLDivElement>) => {
    if (!ref.current) return;

    const rect = ref.current.getBoundingClientRect();
    const width = rect.width;
    const height = rect.height;

    const mouseX = e.clientX - rect.left;
    const mouseY = e.clientY - rect.top;

    const xPct = mouseX / width - 0.5;
    const yPct = mouseY / height - 0.5;

    x.set(xPct);
    y.set(yPct);
  };

  const handleMouseLeave = () => {
    x.set(0);
    y.set(0);
  };

  const handleAttend = () => {
    setIsAttending(!isAttending);
    onAttend();
  };

  const imageUrl = "https://picsum.photos/350/200?random=1";

  return (
    <motion.div
      ref={ref}
      onMouseMove={handleMouseMove}
      onMouseLeave={handleMouseLeave}
      style={{ rotateX, rotateY, transformStyle: "preserve-3d" }}
      className="relative w-[350px] perspective-1000"
      onMouseEnter={() => setHovered(true)}
      onMouseOut={() => setHovered(false)}
      initial={{ opacity: 0, y: 50 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <Card className="w-full bg-white shadow-xl transition-all duration-300 ease-out hover:shadow-2xl overflow-hidden transform-style-3d">
        <div className="relative">
          <LaserBeam side="top" />
          <LaserBeam side="right" />
          <LaserBeam side="bottom" />
          <LaserBeam side="left" />
        </div>
        <motion.div
          className="relative h-48 overflow-hidden"
          whileHover={{ scale: 1.05 }}
          transition={{ duration: 0.3 }}
        >
          <motion.img
            src={imageUrl}
            alt={title}
            className="object-cover w-full h-full"
            initial={{ filter: "brightness(0.8)" }}
            whileHover={{ filter: "brightness(1)" }}
            transition={{ duration: 0.3 }}
          />
          <motion.div
            className="absolute top-4 left-4 flex gap-2 flex-wrap"
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2, staggerChildren: 0.1 }}
          >
            {tags.map((tag, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 0.2 }}
              >
                <Badge
                  variant="secondary"
                  className="bg-black/50 text-white hover:bg-black/70"
                >
                  {tag}
                </Badge>
              </motion.div>
            ))}
          </motion.div>
        </motion.div>
        <CardHeader>
          <div className="flex justify-between items-start">
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.3 }}
            >
              <CardTitle className="text-2xl font-bold">{title}</CardTitle>
            </motion.div>
          </div>
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
          >
            <CardDescription>{description}</CardDescription>
          </motion.div>
        </CardHeader>
        <CardContent>
          <motion.div
            className="flex flex-col gap-2 text-sm"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.5, staggerChildren: 0.1 }}
          >
            {[
              { Icon: Calendar, text: date },
              { Icon: MapPin, text: location },
              { Icon: Users, text: `${attendees} attendees` },
            ].map(({ Icon, text }, index) => (
              <motion.div
                key={index}
                className="flex items-center gap-2"
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.3 }}
              >
                <Icon className="w-4 h-4" />
                <span>{text}</span>
              </motion.div>
            ))}
          </motion.div>
        </CardContent>
      </Card>
    </motion.div>
  );
}
